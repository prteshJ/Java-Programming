package solutions_chapter14_exercises;

import java.util.ArrayList;

import javafx.application.Application;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Polyline;
import javafx.scene.shape.Shape;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Exercise14_19 extends Application {

	private static final double PANE_WIDTH  = 400;
	private static final double PANE_HEIGHT = 200;
	private static final double OFFSET = 25;
	@Override
	public void start(Stage primaryStage) {	
		Pane sinCosCurves = new Pane();
		
		ArrayList<Shape> sinCosContainer = new ArrayList<>();
		
		/************************VERTICAL   LINE***************************************************************/
		
		Line verticalLine = new Line();
		verticalLine.setStartX(PANE_WIDTH/2 + OFFSET/6 - 5);
		verticalLine.setStartY(OFFSET/2);
		verticalLine.setEndX(PANE_WIDTH/2 + OFFSET/6 - 5);
		verticalLine.setEndY(PANE_HEIGHT - OFFSET/2);
		sinCosContainer.add(verticalLine);
		
		Line verticalArrowLeftPart = new Line();
		verticalArrowLeftPart.setStartX(verticalLine.getStartX());
		verticalArrowLeftPart.setStartY(verticalLine.getStartY());
		verticalArrowLeftPart.setEndX(verticalArrowLeftPart.getStartX() - OFFSET/2);
		verticalArrowLeftPart.setEndY(verticalArrowLeftPart.getStartY() + OFFSET/2);
		sinCosContainer.add(verticalArrowLeftPart);
		
		Line verticalArrowRightPart = new Line();
		verticalArrowRightPart.setStartX(verticalLine.getStartX());
		verticalArrowRightPart.setStartY(verticalLine.getStartY());
		verticalArrowRightPart.setEndX(verticalArrowRightPart.getStartX() + OFFSET/2);
		verticalArrowRightPart.setEndY(verticalArrowRightPart.getStartY() + OFFSET/2);
		sinCosContainer.add(verticalArrowRightPart);
		
		Text axisY = new Text("Y");
		double axisY_xLoc = verticalArrowRightPart.getStartX() + OFFSET * 0.65;
		double axisY_yLoc = verticalArrowRightPart.getStartY() + OFFSET/3;
		axisY.setX(axisY_xLoc);
		axisY.setY(axisY_yLoc);
		sinCosContainer.add(axisY);
		
		/************************HORIZONTAL LINE***************************************************************/
	
		Line horizontalLine = new Line();
		horizontalLine.setStartX(OFFSET/2);
		horizontalLine.setStartY(PANE_HEIGHT/2);
		horizontalLine.setEndX(PANE_WIDTH - OFFSET/2);
		horizontalLine.setEndY(PANE_HEIGHT/2);
		sinCosContainer.add(horizontalLine);
		
		Line horizontalArrowLeftPart = new Line();
		horizontalArrowLeftPart.setStartX(horizontalLine.getEndX());
		horizontalArrowLeftPart.setStartY(horizontalLine.getEndY());
		horizontalArrowLeftPart.setEndX(horizontalArrowLeftPart.getStartX() - OFFSET/2);
		horizontalArrowLeftPart.setEndY(horizontalArrowLeftPart.getStartY() - OFFSET/2);
		sinCosContainer.add(horizontalArrowLeftPart);
		
		Line horizontalArrowRightPart = new Line();
		horizontalArrowRightPart.setStartX(horizontalLine.getEndX());
		horizontalArrowRightPart.setStartY(horizontalLine.getEndY());
		horizontalArrowRightPart.setEndX(horizontalArrowLeftPart.getStartX() - OFFSET/2);
		horizontalArrowRightPart.setEndY(horizontalArrowLeftPart.getStartY() + OFFSET/2);
		sinCosContainer.add(horizontalArrowRightPart);
		
		Text axisX = new Text("X");
		double axisX_xLoc = horizontalLine.getEndX();
		double axisX_yLoc = horizontalLine.getEndY();
		axisX.setX(axisX_xLoc);
		axisX.setY(axisX_yLoc);
		sinCosContainer.add(axisX);
		
		/************************SINE WAVE***************************************************************/
		Polyline sinPlotter = new Polyline(); 
		sinPlotter.setStroke(Color.RED);
		ObservableList<Double> sinCurvePoints = sinPlotter.getPoints(); 
		double scaleFactor = 50;
		for (int x = -170; x <= 170; x++) {
				sinCurvePoints.add(x + 200.0);
				sinCurvePoints.add(100 - scaleFactor * Math.sin((x / 100.0) * 2 * Math.PI)); 
		}
		
		/*Text testPoint = new Text("\u03c0");
		testPoint.setStroke(Color.GREEN);
		testPoint.setX(25+25+25+25); // Move starting from 25 across each curve
		testPoint.setY(100); // 100 is midpoint of pane height
		sinCosContainer.add(testPoint);*/
		
		sinCosContainer.add(sinPlotter);
		
		/************************COSINE WAVE***************************************************************/
		
		Polyline cosPlotter = new Polyline(); 
		cosPlotter.setStroke(Color.BLUE);
		ObservableList<Double> cosCurvePoints = cosPlotter.getPoints(); 
		double scaleCosFactor = 50;
		for (int x = -170; x <= 170; x++) {
				cosCurvePoints.add(x + 200.0);
				cosCurvePoints.add(100 - scaleCosFactor * Math.cos((x / 100.0) * 2 * Math.PI)); 
		}
		
		sinCosContainer.add(cosPlotter);
		
		/***************************************************************************************/
		sinCosCurves.getChildren().addAll(sinCosContainer);
		/***************************************************************************************/
		
		Scene sinCosCurvesScene = new Scene(sinCosCurves, PANE_WIDTH, PANE_HEIGHT);
		primaryStage.setTitle("Exercise14_19");
		primaryStage.setScene(sinCosCurvesScene);
		primaryStage.show();
	}

	/**
	 * Main method needed only if poor IDE support
	 */
	public static void main(String[] args) {
		Application.launch(args);
	}
}
