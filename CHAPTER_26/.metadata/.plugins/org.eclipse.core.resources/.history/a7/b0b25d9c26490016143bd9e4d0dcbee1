package liangChapter26_Examples;

public class AVLTree<E extends Comparable<E>> extends BST<E> {
	/** Create an empty AVL tree */
	public AVLTree() {
	}

	/** Create an AVL tree from an array of objects */
	public AVLTree(E[] objects) {
		super(objects);
	}

	@Override  /** Override createNewNode to create an AVLTreeNode */
	protected AVLTreeNode<E> createNewNode(E e) {
		return new AVLTreeNode<E>(e);
	}
	
	@Override  /** Insert an element and rebalance if necessary */
	public boolean insert(E e) {
		boolean successful = super.insert(e);
		if(!successful)
			return false; // e is already in the tree
		else {
			balancePath(e); // Balance from e to the root if necessary
		}
		return true; // e is inserted
	}
	
	/** Update the height of a specified node */
	private void updateHeight(AVLTreeNode<E> node) {
		if(node.left == null && node.right == null)  // node is a leaf
			node.height = 0;
		else if(node.left == null) // node has no left subtree
			node.height = 1 + ((AVLTreeNode<E>)(node.right)).height;
		else 
			node.height = 1 +
						  Math.max(((AVLTreeNode<E>)(node.right)).height, ((AVLTreeNode<E>)(node.left)).height);
	}
	
	/** Balance the nodes in the path from the specified
	 * node to the root if necessary
	 */
	public void balancePath(E e) {
		java.util.ArrayList<TreeNode<E>> path = path(e);
		for(int i = path.size() - 1; i >= 0; i--) {
			AVLTreeNode<E> A = (AVLTreeNode<E>)(path.get(i));
			updateHeight(A);
			AVLTreeNode<E> parentOfA = (A == root) ? null : (AVLTreeNode<E>)(path.get(i - 1));
			
			
		}
	}

	/** Return the balance factor of the node */
	private int balanceFactor(AVLTreeNode<E> node) {
		if(node.right == null) // node has no right subtree
			return -node.height;
		else if(node.left == null)  // node has no left subtree
			return +node.height;
		else
			return ((AVLTreeNode<E>)node.right).height -
					((AVLTreeNode<E>)node.left).height;
	}
	
	/** AVLTreeNode is TreeNode plus height */
	protected static class AVLTreeNode<E extends Comparable<E>> extends BST.TreeNode<E> {
		protected int height = 0; // New data field

		public AVLTreeNode(E e) {
			super(e);
		}
	}
}
